{"version":3,"sources":["shared/constants/month-name.constant.ts","components/MovieList/MovieHeader.tsx","shared/helpers/format-date.ts","components/MovieList/MovieDescription.tsx","components/MovieList/MovieLink.tsx","components/MovieList/MovieItem.tsx","components/MovieList/MovieList.tsx","shared/hooks/useMovieList.tsx"],"names":["MONTH_NAMES","MovieHeaderStyle","styled","div","MovieTitle","h3","MovieDate","span","MovieHeader","id","title","releaseDate","to","date","Error","split","year","month","day","length","parseInt","Number","formatDate","MovieDescriptionStyle","p","MovieDescription","description","substring","MovieLinkStyle","MovieLink","MovieContent","MovieItem","MovieList","useState","movieList","setMovieList","loading","setLoading","useEffect","mounted","a","getAllMovie","movieDataType","fetchData","useMovieList","Loader","map","movie","key"],"mappings":"4OAAaA,EAAc,CACzB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YCJF,I,EAAMC,EAAmBC,IAAOC,IAAV,mGAMhBC,EAAaF,IAAOG,GAAV,gIAMVC,EAAYJ,IAAOK,KAAV,kDAIA,SAASC,EAAT,GAIO,IAHpBC,EAGmB,EAHnBA,GACAC,EAEmB,EAFnBA,MACAC,EACmB,EADnBA,YAEA,OACE,kBAACV,EAAD,KACE,kBAACG,EAAD,KACE,kBAAC,IAAD,CAAMQ,GAAE,iBAAYH,IAAOC,IAE7B,kBAACJ,EAAD,KChCC,SAAoBO,GACzB,IAAKA,EACH,MAAM,IAAIC,MAAM,8BAGlB,MAA2BD,EAAKE,MAAM,KAAtC,mBAAOC,EAAP,KAAaC,EAAb,KAAoBC,EAApB,KACA,IACGF,IACAC,IACAC,GACDF,EAAKG,OAAS,GACdC,SAASH,GAAS,GAClBG,SAASH,GAAS,GAElB,MAAM,IAAIH,MAAM,uCAElB,MAAM,GAAN,OAAUd,EAAYqB,OAAOJ,GAAS,GAAtC,YAA4CC,EAA5C,aAAoDF,GDgBpCM,CAAWX,KE5B7B,I,EAAMY,EAAwBrB,IAAOsB,EAAV,qIAOZ,SAASC,EAAT,GAEY,IADzBC,EACwB,EADxBA,YAEA,OACE,kBAACH,EAAD,KACGG,EAAYC,UAAU,EAAG,KAD5B,OCVJ,I,EAAMC,EAAiB1B,IAAOsB,EAAV,2GAOL,SAASK,EAAT,GAA4C,IAAvBpB,EAAsB,EAAtBA,GAClC,OACE,kBAACmB,EAAD,KACE,kBAAC,IAAD,CAAMhB,GAAE,iBAAYH,IAApB,cCNN,IAAMqB,EAAe5B,IAAOC,IAAV,6LAYH,SAAS4B,EAAT,GAKI,IAJjBtB,EAIgB,EAJhBA,GACAC,EAGgB,EAHhBA,MACAgB,EAEgB,EAFhBA,YACAf,EACgB,EADhBA,YAEA,OAEE,kBAACmB,EAAD,KACE,kBAACtB,EAAD,CAAaC,GAAIA,EAAIC,MAAOA,EAAOC,YAAaA,IAChD,kBAACc,EAAD,CAAkBC,YAAaA,IAC/B,kBAACG,EAAD,CAAWpB,GAAIA,K,qDCzBN,SAASuB,IACtB,MCNa,WACb,MAAkCC,mBAA0B,IAA5D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAkB,GAAhD,mBAAOG,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,qBAAU,WACR,IAAIC,GAAU,EAUd,OATe,uCAAG,4BAAAC,EAAA,sEACYC,cADZ,OACVC,EADU,OAEZH,IACFJ,EAAaO,GACbL,GAAW,IAJG,2CAAH,oDAQfM,GACO,WACLJ,GAAU,KAEX,IAEI,CACLH,UACAF,aDhB6BU,GAAvBR,EAAR,EAAQA,QAASF,EAAjB,EAAiBA,UAEjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGE,EACC,kBAACS,EAAA,EAAD,MAEAX,EAAUY,KAAI,SAACC,GAAD,OACZ,kBAAChB,EAAD,CACEiB,IAAKD,EAAMtC,GACXA,GAAIsC,EAAMtC,GACViB,YAAaqB,EAAMrB,YACnBf,YAAaoC,EAAMpC,YACnBD,MAAOqC,EAAMrC","file":"static/js/6.b03f4b5c.chunk.js","sourcesContent":["export const MONTH_NAMES = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport { formatDate } from 'src/shared/helpers/format-date';\n\n\nconst MovieHeaderStyle = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1.7rem;\n`;\n\nconst MovieTitle = styled.h3`\n  font-family: 'Star Jedi', 'Open Sans', sans-serif;\n  font-size: 2.2rem;\n  letter-spacing: 2px;\n`;\n\nconst MovieDate = styled.span`\n  font-size: 1.4rem;\n`;\n\nexport default function MovieHeader({\n  id,\n  title,\n  releaseDate,\n}: MovieHeaderProps) {\n  return (\n    <MovieHeaderStyle>\n      <MovieTitle>\n        <Link to={`/movie/${id}`}>{title}</Link>\n      </MovieTitle>\n      <MovieDate>{formatDate(releaseDate)}</MovieDate>\n    </MovieHeaderStyle>\n  );\n}\n\nexport type MovieHeaderProps = {\n  id: number;\n  title: string;\n  releaseDate: string;\n};\n\nMovieHeader.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  releaseDate: PropTypes.string.isRequired,\n};\n","import { MONTH_NAMES } from '../constants/month-name.constant';\n\nexport function formatDate(date: string): string {\n  if (!date) {\n    throw new Error('Missing required parameter');\n  }\n\n  const [year, month, day] = date.split('-');\n  if (\n    !year ||\n    !month ||\n    !day ||\n    year.length < 4 ||\n    parseInt(month) < 1 ||\n    parseInt(month) > 12\n  ) {\n    throw new Error('Parameter format must be YYYY-MM-DD');\n  }\n  return `${MONTH_NAMES[Number(month) - 1]} ${day}, ${year}`;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\n\n\nconst MovieDescriptionStyle = styled.p`\n  font-family: inherit;\n  overflow-wrap: break-word;\n  white-space: normal;\n  margin-bottom: 2.5rem;\n`;\n\nexport default function MovieDescription({\n  description,\n}: MovieDescriptionProps) {\n  return (\n    <MovieDescriptionStyle>\n      {description.substring(0, 260)}...\n    </MovieDescriptionStyle>\n  );\n}\n\nexport type MovieDescriptionProps = {\n  description: string;\n};\n\nMovieDescription.propTypes = {\n  description: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n\n\nconst MovieLinkStyle = styled.p`\n  padding-top: 1.2rem;\n  font-size: 1.4rem;\n  text-transform: capitalize;\n\n`;\n\nexport default function MovieLink({ id }: MovieLinkProps) {\n  return (\n    <MovieLinkStyle>\n      <Link to={`/movie/${id}`}>More info</Link>\n    </MovieLinkStyle>\n  );\n}\n\nexport type MovieLinkProps = {\n  id: number;\n};\n\nMovieLink.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport MovieHeader from './MovieHeader';\nimport MovieDescription from './MovieDescription';\nimport MovieLink from './MovieLink';\n\nimport { MovieDataType } from 'src/shared/helpers/api';\n\n\nconst MovieContent = styled.div`\n  display: block;\n  padding: 2rem;\n  transform: perspective(1px) translateZ(0);\n\n  transition: all 0.3s;\n  overflow: hidden;\n  border-radius: 0.5rem;\n\n\n`;\n\nexport default function MovieItem({\n  id,\n  title,\n  description,\n  releaseDate,\n}: MovieDataType) {\n  return (\n\n    <MovieContent>\n      <MovieHeader id={id} title={title} releaseDate={releaseDate} />\n      <MovieDescription description={description} />\n      <MovieLink id={id} />\n    </MovieContent>\n\n  );\n}\n\nMovieItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  releaseDate: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport MovieItem from './MovieItem';\n\nimport { Container, Row } from 'src/shared/styles/base/grid';\nimport Loader from 'src/shared/components/Loader/Loader';\n\nimport useMovieList from 'src/shared/hooks/useMovieList';\n\nexport default function MovieList() {\n  const { loading, movieList } = useMovieList();\n\n  return (\n    <Container>\n      <Row>\n        {loading ? (\n          <Loader />\n        ) : (\n          movieList.map((movie) => (\n            <MovieItem\n              key={movie.id}\n              id={movie.id}\n              description={movie.description}\n              releaseDate={movie.releaseDate}\n              title={movie.title}\n            />\n          ))\n        )}\n      </Row>\n    </Container>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nimport { getAllMovie, MovieDataType } from 'src/shared/helpers/api';\n\nexport default function useMovieList(): MovieListHooksType {\n  const [movieList, setMovieList] = useState<MovieDataType[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    let mounted = true;\n    const fetchData = async () => {\n      const movieDataType = await getAllMovie();\n      if (mounted) {\n        setMovieList(movieDataType);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return {\n    loading,\n    movieList,\n  };\n}\n\nexport type MovieListHooksType = {\n  loading: boolean;\n  movieList: MovieDataType[];\n};\n"],"sourceRoot":""}