{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { getAllMovie } from 'src/shared/helpers/api';\nexport default function useMovieList() {\n  const [movieList, setMovieList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      const movieDataType = await getAllMovie();\n\n      if (mounted) {\n        setMovieList(movieDataType);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n  return {\n    loading,\n    movieList\n  };\n}","map":{"version":3,"sources":["/Users/trishalabhasin/Development/swapi-task/src/shared/hooks/useMovieList.tsx"],"names":["useState","useEffect","getAllMovie","useMovieList","movieList","setMovieList","loading","setLoading","mounted","fetchData","movieDataType"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,WAAT,QAA2C,wBAA3C;AAEA,eAAe,SAASC,YAAT,GAA4C;AACzD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAkB,EAAlB,CAA1C;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAU,IAAV,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,OAAO,GAAG,IAAd;;AACA,UAAMC,SAAS,GAAG,YAAY;AAC5B,YAAMC,aAAa,GAAG,MAAMR,WAAW,EAAvC;;AACA,UAAIM,OAAJ,EAAa;AACXH,QAAAA,YAAY,CAACK,aAAD,CAAZ;AACAH,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KAND;;AAQAE,IAAAA,SAAS;AACT,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GAdQ,EAcN,EAdM,CAAT;AAgBA,SAAO;AACLF,IAAAA,OADK;AAELF,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { getAllMovie, MovieDataType } from 'src/shared/helpers/api';\n\nexport default function useMovieList(): MovieListHooksType {\n  const [movieList, setMovieList] = useState<MovieDataType[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    let mounted = true;\n    const fetchData = async () => {\n      const movieDataType = await getAllMovie();\n      if (mounted) {\n        setMovieList(movieDataType);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  return {\n    loading,\n    movieList,\n  };\n}\n\nexport type MovieListHooksType = {\n  loading: boolean;\n  movieList: MovieDataType[];\n};\n"]},"metadata":{},"sourceType":"module"}