{"ast":null,"code":"import { API_URL } from '../constants/api.constant';\nexport const getAllMovie = async () => {\n  const res = await fetch(API_URL);\n  const resJson = await res.json();\n  const editedMovieList = resJson.results.map(movie => ({\n    id: Number(movie.url.split('/').filter(Boolean).pop()),\n    title: movie.title,\n    description: movie.opening_crawl,\n    releaseDate: movie.release_date\n  }));\n  return editedMovieList;\n};\nexport const getSingleMovie = async id => {\n  const res = await fetch(`${API_URL}${id}/`);\n  const resJson = await res.json();\n  const resCharacters = resJson.characters.map(url => fetch(url).then(data => data.json()).then(c => c.name));\n  const resPlanets = resJson.planets.map(url => fetch(url).then(data => data.json()).then(c => c.name));\n  const resSpecies = resJson.species.map(url => fetch(url).then(data => data.json()).then(c => c.name));\n  const resStarships = resJson.starships.map(url => fetch(url).then(data => data.json()).then(c => c.name));\n  const resVehicles = resJson.vehicles.map(url => fetch(url).then(data => data.json()).then(c => c.name));\n  const characters = await Promise.all(resCharacters);\n  const planets = await Promise.all(resPlanets);\n  const species = await Promise.all(resSpecies);\n  const starships = await Promise.all(resStarships);\n  const vehicles = await Promise.all(resVehicles);\n  const data = {\n    characters,\n    director: resJson.director,\n    description: resJson.opening_crawl,\n    planets,\n    producer: resJson.producer,\n    releaseDate: resJson.release_date,\n    species,\n    starships,\n    title: resJson.title,\n    vehicles\n  };\n  return data;\n};","map":{"version":3,"sources":["/Users/trishalabhasin/Development/swapi-task/src/shared/helpers/api.ts"],"names":["API_URL","getAllMovie","res","fetch","resJson","json","editedMovieList","results","map","movie","id","Number","url","split","filter","Boolean","pop","title","description","opening_crawl","releaseDate","release_date","getSingleMovie","resCharacters","characters","then","data","c","name","resPlanets","planets","resSpecies","species","resStarships","starships","resVehicles","vehicles","Promise","all","director","producer"],"mappings":"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","sourcesContent":["import { API_URL } from '../constants/api.constant';\n\nexport const getAllMovie = async (): Promise<MovieDataType[]> => {\n  const res = await fetch(API_URL);\n  const resJson: FilmsResponse = await res.json();\n  const editedMovieList = resJson.results.map((movie) => ({\n    id: Number(\n      movie.url\n        .split('/')\n        .filter(Boolean)\n        .pop()\n    ),\n    title: movie.title,\n    description: movie.opening_crawl,\n    releaseDate: movie.release_date,\n  }));\n  return editedMovieList;\n};\n\nexport const getSingleMovie = async (id: number): Promise<MovieDetailType> => {\n  const res = await fetch(`${API_URL}${id}/`);\n  const resJson: FilmResponse = await res.json();\n  const resCharacters = resJson.characters.map((url) =>\n    fetch(url)\n      .then((data) => data.json())\n      .then((c: CharactersResponse) => c.name)\n  );\n  const resPlanets = resJson.planets.map((url) =>\n    fetch(url)\n      .then((data) => data.json())\n      .then((c: PlanetsResponse) => c.name)\n  );\n  const resSpecies = resJson.species.map((url) =>\n    fetch(url)\n      .then((data) => data.json())\n      .then((c: SpeciesResponse) => c.name)\n  );\n  const resStarships = resJson.starships.map((url) =>\n    fetch(url)\n      .then((data) => data.json())\n      .then((c: StarshipsResponse) => c.name)\n  );\n  const resVehicles = resJson.vehicles.map((url) =>\n    fetch(url)\n      .then((data) => data.json())\n      .then((c: VehiclesResponse) => c.name)\n  );\n  const characters = await Promise.all(resCharacters);\n  const planets = await Promise.all(resPlanets);\n  const species = await Promise.all(resSpecies);\n  const starships = await Promise.all(resStarships);\n  const vehicles = await Promise.all(resVehicles);\n  const data = {\n    characters,\n    director: resJson.director,\n    description: resJson.opening_crawl,\n    planets,\n    producer: resJson.producer,\n    releaseDate: resJson.release_date,\n    species,\n    starships,\n    title: resJson.title,\n    vehicles,\n  };\n  return data;\n};\n\nexport type MovieDataType = {\n  id: number;\n  title: string;\n  description: string;\n  releaseDate: string;\n};\n\nexport type MovieDetailType = {\n  title: string | null;\n  director: string | null;\n  producer: string | null;\n  description: string | null;\n  characters: string[];\n  planets: string[];\n  species: string[];\n  starships: string[];\n  vehicles: string[];\n};\n\nexport type FilmsResponse = {\n  count: number;\n  next: number | null;\n  previos: number | null;\n  results: FilmResponse[];\n};\n\nexport type FilmResponse = {\n  title: string;\n  episode_id: number;\n  opening_crawl: string;\n  director: string;\n  producer: string;\n  release_date: string;\n  characters: string[];\n  planets: string[];\n  starships: string[];\n  vehicles: string[];\n  species: string[];\n  created: string;\n  edited: string;\n  url: string;\n};\n\nexport type CharactersResponse = {\n  name: string;\n  height: string;\n  mass: string;\n  hair_color: string;\n  skin_color: string;\n  eye_color: string;\n  birth_year: string;\n  gender: string;\n  homeworld: string;\n  films: string[];\n  species: string[];\n  vehicles: string[];\n  starships: string[];\n  created: string;\n  edited: string;\n  url: string;\n};\n\nexport type PlanetsResponse = {\n  name: string;\n  rotation_period: string;\n  orbital_period: string;\n  diameter: string;\n  climate: string;\n  gravity: string;\n  terrain: string;\n  surface_water: string;\n  population: string;\n  residents: string[];\n  films: string[];\n  created: string;\n  edited: string;\n  url: string;\n};\n\nexport type StarshipsResponse = {\n  name: string;\n  model: string;\n  manufacturer: string;\n  cost_in_credits: string;\n  length: string;\n  max_atmosphering_speed: string;\n  crew: string;\n  passengers: string;\n  cargo_capacity: string;\n  consumables: string;\n  hyperdrive_rating: string;\n  MGLT: string;\n  starship_class: string;\n  pilots: string[];\n  films: string[];\n  created: string;\n  edited: string;\n  url: string;\n};\n\nexport type VehiclesResponse = {\n  name: string;\n  model: string;\n  manufacturer: string;\n  cost_in_credits: string;\n  length: string;\n  max_atmosphering_speed: string;\n  crew: string;\n  passengers: string;\n  cargo_capacity: string;\n  consumables: string;\n  vehicle_class: string;\n  pilots: string[];\n  films: string[];\n  created: string;\n  edited: string;\n  url: string;\n};\n\nexport type SpeciesResponse = {\n  name: string;\n  classification: string;\n  designation: string;\n  average_height: string;\n  skin_colors: string;\n  hair_colors: string;\n  eye_colors: string;\n  average_lifespan: string;\n  homeworld: string;\n  language: string;\n  people: string[];\n  films: string[];\n  created: string;\n  edited: string;\n  url: string;\n};\n"]},"metadata":{},"sourceType":"module"}